import dynamic from 'next/dynamic';
import Head from "next/head";
import { useState } from "react";
import ContextHookDemo from "./demos/contexthook";
import EffectHookDemo from "./demos/effecthook";
import ReducerHookDemo from "./demos/reducerhook";
import RefHookDemo from "./demos/refhook";
import StateHookDemo from "./demos/statehook";
const MemoHookDemo = dynamic(() => import("./demos/memohook"), {ssr: false});
const CallbackDemo = dynamic(() => import("./demos/callbackhook"), {ssr: false});

enum Demo {
  StateHookDemo,
  EffectHookDemo,
  MemoHookDemo,
  CallbackHookDemo,
  RefHookDemo,
  ContextHookDemo,
  ReducerHookDemo,
}

export default function Home() {
  const [demo, setDemo] = useState(Demo.StateHookDemo);
  return (
    <>
      <Head>
        <title>React Hooks Demo</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* each element split a little */}
      <h1 style={{ margin: "20px", padding: "20px" }}>React Hooks Demo</h1>
      {/* add a group of buttons to switch demo, high light the current button*/}
      <div
        style={{
          display: "flex",
          flexDirection: "row",
          gap: "20px",
          margin: "20px",
          padding: "20px",
        }}
      >
        <button
          onClick={() => setDemo(Demo.StateHookDemo)}
          style={{
            backgroundColor: demo === Demo.StateHookDemo ? "blue" : "initial",
            color: demo === Demo.StateHookDemo ? "white" : "initial",
          }}
        >
          State Hook Demo
        </button>
        <button
          onClick={() => setDemo(Demo.EffectHookDemo)}
          style={{
            backgroundColor: demo === Demo.EffectHookDemo ? "blue" : "initial",
            color: demo === Demo.EffectHookDemo ? "white" : "initial",
          }}
        >
          Effect Hook Demo
        </button>
        <button
          onClick={() => setDemo(Demo.MemoHookDemo)}
          style={{
            backgroundColor: demo === Demo.MemoHookDemo ? "blue" : "initial",
            color: demo === Demo.MemoHookDemo ? "white" : "initial",
          }}
        >
          Memo Hook Demo
        </button>
        <button
          onClick={() => setDemo(Demo.CallbackHookDemo)}
          style={{
            backgroundColor:
              demo === Demo.CallbackHookDemo ? "blue" : "initial",
            color: demo === Demo.CallbackHookDemo ? "white" : "initial",
          }}
        >
          Callback Hook Demo
        </button>
        <button
          onClick={() => setDemo(Demo.RefHookDemo)}
          style={{
            backgroundColor: demo === Demo.RefHookDemo ? "blue" : "initial",
            color: demo === Demo.RefHookDemo ? "white" : "initial",
          }}
        >
          Ref Hook Demo
        </button>

        <button
          onClick={() => setDemo(Demo.ContextHookDemo)}
          style={{
            backgroundColor: demo === Demo.ContextHookDemo ? "blue" : "initial",
            color: demo === Demo.ContextHookDemo ? "white" : "initial",
          }}
        >
          Context Hook Demo
        </button>

        <button
          onClick={() => setDemo(Demo.ReducerHookDemo)}
          style={{
            backgroundColor: demo === Demo.ReducerHookDemo ? "blue" : "initial",
            color: demo === Demo.ReducerHookDemo ? "white" : "initial",
          }}
        >
          Reducer Hook Demo
        </button>
      </div>
      {/* render the current demo */}
      <div style={{ display: demo === Demo.StateHookDemo ? "block" : "none" }}>
        <StateHookDemo />
      </div>
      <div style={{ display: demo === Demo.EffectHookDemo ? "block" : "none" }}>
        <EffectHookDemo />
      </div>
      <div style={{ display: demo === Demo.MemoHookDemo ? "block" : "none" }}>
        <MemoHookDemo />
      </div>
      <div
        style={{ display: demo === Demo.CallbackHookDemo ? "block" : "none" }}
      >
        <CallbackDemo />
      </div>
      <div style={{ display: demo === Demo.RefHookDemo ? "block" : "none" }}>
        <RefHookDemo />
      </div>
      <div
        style={{ display: demo === Demo.ContextHookDemo ? "block" : "none" }}
      >
        <ContextHookDemo />
      </div>
      <div
        style={{ display: demo === Demo.ReducerHookDemo ? "block" : "none" }}
      >
        <ReducerHookDemo />
      </div>
    </>
  );
}
